Stream API (Bulk Operation on Collections)
	Collection is a group of objects as single entity
	If you want to do bulk operation on colllection object then we go for Stream.
	
	Ex:
		AL<Integer> l = new AL<Integer>();
		l.add(0);l.add(5);
		l.add(10);l.add(15);
		l.add(20);l.add(25);
		l.add(30);l.add(35);
		
	Find Even No
		Without Stream
		List<Integer> l1 = new AL<INT>();
		for(Integer i : l){
			if(i%2 == 0){
			l1.add(i);
		}
		
		With Stream
		List<Integer> l1 = l.stream().filter(i -> i%2==0).
							collect(Collectors.toList());
		
	Create new Collection where each element is double of it's original Value
		List<Integer> l1 = new AL<INT>();
		for(Integer i : l){
			
			l1.add(i*2);
		}
		
		With Stream
		List<Integer> l1 = l.stream().map(i -> i*2).
							collect(Collectors.toList());
	To get Stream object from any collection object use below syntax
		Stream s = c.stream();
		
		stream() method present in Collection interface as default method.
		Stream(I) is present in java.util.stream package.
	Once we get Stream object , then processing contain two steps on collection object.
		1. Configuration
		2. Processing
		
		Configuration:
			Using 2 ways we can prform configuration.
				Filter Mechanisem
				Map Mechanisem
				
		Filter : 
			If we want to filter element from thr collection based on some boolean condition,
			then we should go for filtering.
			We can configures Filter by using filter() method of Stream Interface.
			
			public Strem filter(Predicate<T> t);
				Precidate can be boolean valued function or lambda expression
			Stream a = c.stream().filter(i -> i%2 == 0);
		Mapping :
			If we want to create a seprate new object for every object present in the collection
			based on some fuction then we should go for mapping mechanism.
			We can implement mapping by using map() method of Stream Interface.
			
			public Stream map(Function<T,R> f);
			
			Stream s = c.stream().map(i -> i*2);
		

		Processing By Collect() Method
			This methpd collects the elements from the stream and adding to the specified Collection.
			AL<String> l = new AL<String>();
			l.add("ABCD");
			l.add("BCDER");
			l.add("VWERTTY");
			//Retrun all the string whose length >=5
			List<String> l1 = l.stream().filter(s -> s.length() >= 5).collect(Collections.toList());
			
			
		Processing By count() Method
			This method return the no if elements present in Stream.
			
			public long count();	

			long count = l.stream().filter(s -> s.length() >= 5).count();
		
		Processing by sorted() Method
			We can use sorted() method to sort elements inside stream
			We can sort either based on default natural sorting order or based on our own
			customized sorting order specifed by comparator object.
			
			sorted() -> For Default Natural Sorting Order
			sorted(Comparator c) -> For Customized Sorting Order
			
			List<Interger> l = new AL<Interger>();
			l.add(4);
			l.add(42);
			l.add(434);
			l.add(43);
			l.add(30);
			l.add(40);
			
			DNSO -> List<Integer> l1 = l.stream().sorted().collect(Collections.asList());
			CSO ->  List<Integer> l2 = l.stream().sorted((i1,i2)-> -i1.comparaTo(i2)).collect(Collections.asList());
		Processing by min() & max() Method
			min(Comparator c)
				Return minimum value according to specified Comparator
				Integer min = l.stream().min((i1,i2) -> i1.compareTo(i2))).get();
				
			max(Comparator c)
				Return maximun value according to specified Comparator
				Integer max = l.stream().max((i1,i2) -> i1.compareTo(i2))).get();
		
		Processing by forEach() Method
			This methpd won't return any thing.
			This method can take Lamdba expression as argument and apply that lamdba expression 
			for each element present in Stream
			
			l.stream().forEach(s -> sout(s));
			
		Processing by toArray() method
			We can user toArray() method to copy elements present in the stream into specified array.
			
			Integer[] array = l.stream().toArray(Integer[] :: new);
		
		Stream.of() Method
			We can also apply Stream for group of values & for arrays
			
			For Group of values
				Stream<Integer> s = Stream.of(9,99,999,9999);
				
				After that on "S" object we can apply any stream operation
			
			For Arrays
				Double[] d ={10.0,11.5}
				Stream<Double> s1 = Stream.of(d);
				s1.forEach(System.out::println)
